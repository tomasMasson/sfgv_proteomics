import pandas as pd
ORTHOGROUPS = pd.read_csv("../resources/Orthogroups.tsv", sep="\t", usecols=["Orthogroup"]).Orthogroup


rule all:
    input:
        "../results/sfgv-arg_proteome_dataset.csv",
        "../results/ob_proteome_annotation.tsv",
        "../results/figure1.png",
        "../results/orf101_orthologs_refseq.aln.faa.treefile",
        "../results/evolutionary_rates/evolutionary_rates.csv"

rule map_uniprot2ncbi:
    input:
        query="../resources/uniprot_spodoptera_frugiperda_granulovirus.fasta",
        db_in="../resources/sfgv-arg_proteome.faa"
    output:
        search="../results/sfgv_uniprot2ncbi.tab"
    shell:
        """
        makeblastdb -in {input.db_in} -dbtype prot -out database && \
        blastp -query {input.query} -db database -max_target_seqs 1 -outfmt 6 -out {output.search} && \
        rm database*
        """

rule merge_datasets:
    input:
        d1="../resources/sfgv01_data.csv",
        d2="../resources/sfgv02_data.csv",
        d3="../resources/sfgv03_data.csv"
    output:
        temp("consensus_table.csv")
    shell:
        """
        ./create_proteins_table.py -d1 {input.d1} -d2 {input.d2} -d3 {input.d3} -o {output}
        """

rule convert_uniprot2ncbi:
    input:
        mappings="../results/sfgv_uniprot2ncbi.tab",
        proteome="consensus_table.csv"
    output:
        "../results/sfgv-arg_proteome_dataset.csv"
    shell:
        """
        ./convert_uniprot2ncbi.py -m {input.mappings} -p {input.proteome} -o {output}
        """


rule extract_ob_proteome:
    input:
        proteome="../resources/sfgv-arg_proteome.faa",
        list="../results/sfgv-arg_proteome_dataset.csv"
    output:
        "../results/ob_proteome.faa"
    shell:
        """
        ./extract_ob_proteome.py -p {input.proteome} -l {input.list} -o {output}
        """


rule pfam_functional_annotation:
    input:
        query="../results/ob_proteome.faa",
        db="../resources/Pfam-A.hmm",
        go="../resources/pfam2go"
    output:
        "../results/ob_proteome_annotation.tsv"
    shell:
        """
        rm ../resources/Pfam-A.hmm.* && \
        hmmpress {input.db} && \
        hmmscan {input.db} {input.query} > temporal && \
        ./create_pfam_table.py -i temporal -g {input.go} -o {output} && \
        rm temporal
        """
        

rule plot_figure1:
    input:
        annotations="../resources/manual_annotations.csv",
        protein_list="../results/sfgv-arg_proteome_dataset.csv"
    output:
        "../results/figure1.png"
    shell:
        """
        ./plot_proteomic_data.py --annotations {input.annotations} --protein_list {input.protein_list} --output ../results/figure1
        """

rule jackhmmer_orf101:
    input:
        orf101="../resources/orf101_sfgv.faa",
        db="../resources/baculoviridae_refseq_proteins.faa"
    output:
        "../results/orf101_jackhmmer_refseq_search.txt"
    shell:
        """
        jackhmmer --tblout {output} {input.orf101} {input.db}
        """

rule extract_orf101_orthologs:
    input:
        sequences="../resources/baculoviridae_refseq_proteins.faa",
        jackhmmer="../results/orf101_jackhmmer_refseq_search.txt"
    output:
        "../results/orf101_orthologs_refseq.faa"
    shell:
        """
        ./extract_orthologs_jackhmmer.py -s {input.sequences} -j {input.jackhmmer} -o {output}
        """

rule align_orf101_orthologs:
    input:
        "../results/orf101_orthologs_refseq.faa"
    output:
        "../results/orf101_orthologs_refseq.aln.faa"
    shell:
        """
        mafft {input} > {output}
        """

rule build_orf101_phylogeny:
    input:
        sequences="../results/orf101_orthologs_refseq.aln.faa"
    output:
        "../results/orf101_orthologs_refseq.aln.faa.treefile"
    shell:
        """
        iqtree -s {input} -B 1000 -m JTT+F+R5
        """


rule extract_orthogroup_multifasta:
    input:
        sequences="../resources/betabaculovirus_cds_database.fna",
        orthogroups="../resources/Orthogroups.tsv"
    params: "../results/evolutionary_rates/"
    output: expand("../results/evolutionary_rates/{og}.fna", og=ORTHOGROUPS),
            expand("../results/evolutionary_rates/{og}.faa", og=ORTHOGROUPS)
    shell:
        """
        ./extract_orthogroups.py -o {input.orthogroups} -s {input.sequences} -d {params}
        """


rule protein_alignment:
    input: "../results/evolutionary_rates/{og}.faa"
    output: "../results/evolutionary_rates/{og}.aln.faa"
    shell:
      """
      mafft {input} > {output}
      """


rule filter_codon_alignment:
    input: "../results/evolutionary_rates/{og}.aln.faa"
    params: "../results/evolutionary_rates/{og}.fna"
    output: "../results/evolutionary_rates/{og}.aln.filt.fna"
    shell:
      """
      trimal -in {input} -out {output} -ignorestopcodon -backtrans {params} -cons 60 -gt 0.4
      """




# rule codon_alignment:
#     input: "../results/evolutionary_rates/{og}.aln.faa",
#            "../results/evolutionary_rates/{og}.fna"
#     output: "../results/evolutionary_rates/{og}.aln.fna"
#     shell:
#       """
#       pal2nal.pl {input} -output fasta > {output}
#       """


rule run_fubar_analysis:
    input: "../results/evolutionary_rates/{og}.aln.filt.fna",
           "../resources/SpeciesTree_rooted.txt"
    output: "../results/evolutionary_rates/{og}.aln.filt.fna.FUBAR.json"
    shell:
      """
      hyphy fubar --alignment {input[0]} --tree {input[1]}
      """


rule run_meme_analysis:
    input: "../results/evolutionary_rates/{og}.aln.filt.fna",
           "../resources/SpeciesTree_rooted.txt"
    output: "../results/evolutionary_rates/{og}.aln.filt.fna.MEME.json"
    shell:
      """
      hyphy meme --alignment {input[0]} --tree {input[1]}
      """


rule process_fubar_absrel_results:
    input:
        # fubar="../results/evolutionary_rates/{og}.aln.filt.fna.FUBAR.json"
        fubar="../results/evolutionary_rates/{og}.aln.filt.fna.FUBAR.json",
        meme="../results/evolutionary_rates/{og}.aln.filt.fna.MEME.json",

    output: temp("../results/evolutionary_rates/{og}.hyphy.csv")
    shell:
      """
      ./parse_hyphy_output.py --fubar {input.fubar} --meme {input.meme} --output {output}
      """


rule merge_hyphy_results:
    input: expand("../results/evolutionary_rates/{og}.hyphy.csv", og=ORTHOGROUPS)
    output: "../results/evolutionary_rates/evolutionary_rates.csv"
    shell:
      """
      cat {input} > {output}
      """
